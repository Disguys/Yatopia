From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Wed, 7 Oct 2020 17:47:12 +0800
Subject: [PATCH] New lighting algorithm


diff --git a/src/main/java/com/destroystokyo/paper/PaperCommand.java b/src/main/java/com/destroystokyo/paper/PaperCommand.java
index f81bd67a323f2e72bdad76c52016993a0bf88307..3a0e6077c1087c20826a0160e89136f1ce3c7daf 100644
--- a/src/main/java/com/destroystokyo/paper/PaperCommand.java
+++ b/src/main/java/com/destroystokyo/paper/PaperCommand.java
@@ -10,6 +10,7 @@ import com.google.gson.JsonObject;
 import com.google.gson.internal.Streams;
 import com.google.gson.stream.JsonWriter;
 import net.minecraft.server.*;
+import net.yatopia.server.lighting.LightEngineImpl;
 import org.apache.commons.lang3.tuple.MutablePair;
 import org.apache.commons.lang3.tuple.Pair;
 import org.bukkit.Bukkit;
@@ -208,14 +209,14 @@ public class PaperCommand extends Command {
         CraftPlayer player = (CraftPlayer) sender;
         EntityPlayer handle = player.getHandle();
         net.minecraft.server.WorldServer world = (WorldServer) handle.world;
-        LightEngineThreaded lightengine = world.getChunkProvider().getLightEngine();
+        LightEngineImpl lightengine = world.getChunkProvider().getLightEngine();
 
         BlockPosition center = MCUtil.toBlockPosition(player.getLocation());
         Deque<ChunkCoordIntPair> queue = new ArrayDeque<>(MCUtil.getSpiralOutChunks(center, radius));
         updateLight(sender, world, lightengine, queue);
     }
 
-    private void updateLight(CommandSender sender, WorldServer world, LightEngineThreaded lightengine, Deque<ChunkCoordIntPair> queue) {
+    private void updateLight(CommandSender sender, WorldServer world, LightEngineImpl lightengine, Deque<ChunkCoordIntPair> queue) {
         ChunkCoordIntPair coord = queue.poll();
         if (coord == null) {
             sender.sendMessage("All Chunks Light updated");
@@ -232,7 +233,7 @@ public class PaperCommand extends Command {
                 updateLight(sender, world, lightengine, queue);
                 return;
             }
-            lightengine.a(world.paperConfig.lightQueueSize + 16 * 256); // ensure full chunk can fit into queue
+            // lightengine.a(world.paperConfig.lightQueueSize + 16 * 256); // TODO ensure full chunk can fit into queue
             sender.sendMessage("Updating Light " + coord);
             int cx = chunk.getPos().x << 4;
             int cz = chunk.getPos().z << 4;
@@ -240,11 +241,11 @@ public class PaperCommand extends Command {
                 for (int x = 0; x < 16; x++) {
                     for (int z = 0; z < 16; z++) {
                         BlockPosition pos = new BlockPosition(cx + x, y, cz + z);
-                        lightengine.a(pos);
+                        lightengine.checkBlock(pos);
                     }
                 }
             }
-            lightengine.queueUpdate();
+            // lightengine.queueUpdate();
             PlayerChunk visibleChunk = world.getChunkProvider().playerChunkMap.getVisibleChunk(chunk.coordinateKey);
             if (visibleChunk != null) {
                 world.getChunkProvider().playerChunkMap.addLightTask(visibleChunk, () -> {
@@ -256,7 +257,7 @@ public class PaperCommand extends Command {
             } else {
                 updateLight(sender, world, lightengine, queue);
             }
-            lightengine.a(world.paperConfig.lightQueueSize);
+            // lightengine.a(world.paperConfig.lightQueueSize);
         }, MinecraftServer.getServer());
     }
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index b7fcbef8d38c9406a891d64f8016bc16572f00d9..3fe8d96e18b4fdb8676e9bc438cd95eaebb79c5b 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -20,6 +20,8 @@ import java.util.function.Supplier;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 import javax.annotation.Nullable;
+
+import net.yatopia.server.lighting.LightEngineImpl;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -545,7 +547,7 @@ public class Chunk implements IChunkAccess {
             boolean flag2 = chunksection.c();
 
             if (flag1 != flag2) {
-                this.world.getChunkProvider().getLightEngine().a(blockposition, flag2);
+                this.world.getChunkProvider().getLightEngine().setSectionStatus(SectionPosition.a(blockposition), flag2);
             }
 
             if (!this.world.isClientSide) {
@@ -588,7 +590,7 @@ public class Chunk implements IChunkAccess {
     }
 
     @Nullable
-    public LightEngine e() {
+    public LightEngineImpl e() {
         return this.world.getChunkProvider().getLightEngine();
     }
 
diff --git a/src/main/java/net/minecraft/server/ChunkEmpty.java b/src/main/java/net/minecraft/server/ChunkEmpty.java
index d2286f1549de563332c3e4181b9ada30845b3725..bec0a9acccfbe5192fad6d8f8b7a2b79f4911ef8 100644
--- a/src/main/java/net/minecraft/server/ChunkEmpty.java
+++ b/src/main/java/net/minecraft/server/ChunkEmpty.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.yatopia.server.lighting.LightEngineImpl;
+
 import java.util.Arrays;
 import java.util.List;
 import java.util.function.Predicate;
@@ -38,7 +40,7 @@ public class ChunkEmpty extends Chunk {
 
     @Nullable
     @Override
-    public LightEngine e() {
+    public LightEngineImpl e() {
         return null;
     }
 
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 084a31f16c925ccdc58d6e4faeeb497f4de7b2ee..a3b127e34620fb18b000deb5aa4fe1643d0e46c4 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -1,13 +1,11 @@
 package net.minecraft.server;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Either;
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
@@ -17,15 +15,12 @@ import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
-import com.destroystokyo.paper.exception.ServerInternalException;
+
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap; // Paper
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import net.yatopia.server.lighting.LightEngineImpl;
 
 // Tuinity start
-import it.unimi.dsi.fastutil.objects.Object2BooleanLinkedOpenHashMap;
-import it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator;
-import it.unimi.dsi.fastutil.objects.Object2BooleanMap;
+
 // Tuinity end
 
 public class ChunkProviderServer extends IChunkProvider {
@@ -35,7 +30,7 @@ public class ChunkProviderServer extends IChunkProvider {
     public final ChunkGenerator chunkGenerator;
     private final WorldServer world;
     public final Thread serverThread; // Paper - private -> public
-    private final LightEngineThreaded lightEngine;
+    private final LightEngineImpl lightEngine;
     public final ChunkProviderServer.a serverThreadQueue; // Paper private -> public
     public final PlayerChunkMap playerChunkMap;
     private final WorldPersistentData worldPersistentData;
@@ -404,7 +399,7 @@ public class ChunkProviderServer extends IChunkProvider {
     // CraftBukkit end
 
     @Override
-    public LightEngineThreaded getLightEngine() {
+    public LightEngineImpl getLightEngine() {
         return this.lightEngine;
     }
 
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index e81c472e03ee50f58bd16709108572080760bcd5..448dd325ecaa583dbda3ada875b5f98cf0e9788b 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -17,6 +17,8 @@ import java.util.Map.Entry;
 import java.util.Objects;
 import java.util.function.Function;
 import javax.annotation.Nullable;
+
+import net.yatopia.server.lighting.LightEngineImpl;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -101,11 +103,11 @@ public class ChunkRegionLoader {
         ChunkSection[] achunksection = new ChunkSection[16];
         boolean flag2 = worldserver.getDimensionManager().hasSkyLight();
         ChunkProviderServer chunkproviderserver = worldserver.getChunkProvider();
-        LightEngine lightengine = chunkproviderserver.getLightEngine();
+        LightEngineImpl lightengine = chunkproviderserver.getLightEngine();
 
         if (flag) {
             tasksToExecuteOnMain.add(() -> { // Paper - delay this task since we're executing off-main
-                lightengine.b(chunkcoordintpair, true);
+                lightengine.setRetainData(chunkcoordintpair, true);
             }); // Paper - delay this task since we're executing off-main
         }
 
@@ -132,7 +134,7 @@ public class ChunkRegionLoader {
                     // Paper start - delay this task since we're executing off-main
                     NibbleArray blockLight = new NibbleArray(nbttagcompound2.getByteArray("BlockLight"));
                     tasksToExecuteOnMain.add(() -> {
-                        lightengine.a(EnumSkyBlock.BLOCK, SectionPosition.a(chunkcoordintpair, b0), blockLight, true);
+                        lightengine.enqueueSectionData(EnumSkyBlock.BLOCK, SectionPosition.a(chunkcoordintpair, b0), blockLight, true);
                     });
                     // Paper end - delay this task since we're executing off-main
                 }
@@ -141,7 +143,7 @@ public class ChunkRegionLoader {
                     // Paper start - delay this task since we're executing off-main
                     NibbleArray skyLight = new NibbleArray(nbttagcompound2.getByteArray("SkyLight"));
                     tasksToExecuteOnMain.add(() -> {
-                        lightengine.a(EnumSkyBlock.SKY, SectionPosition.a(chunkcoordintpair, b0), skyLight, true);
+                        lightengine.enqueueSectionData(EnumSkyBlock.SKY, SectionPosition.a(chunkcoordintpair, b0), skyLight, true);
                     });
                     // Paper end - delay this task since we're executing off-main
                 }
@@ -345,14 +347,14 @@ public class ChunkRegionLoader {
         org.spigotmc.AsyncCatcher.catchOp("preparation of chunk data for async save");
         ChunkCoordIntPair chunkPos = chunk.getPos();
 
-        LightEngineThreaded lightenginethreaded = world.getChunkProvider().getLightEngine();
+        LightEngineImpl lightengine = world.getChunkProvider().getLightEngine();
 
         NibbleArray[] blockLight = new NibbleArray[17 - (-1)];
         NibbleArray[] skyLight = new NibbleArray[17 - (-1)];
 
         for (int i = -1; i < 17; ++i) {
-            NibbleArray blockArray = lightenginethreaded.a(EnumSkyBlock.BLOCK).a(SectionPosition.a(chunkPos, i));
-            NibbleArray skyArray = lightenginethreaded.a(EnumSkyBlock.SKY).a(SectionPosition.a(chunkPos, i));
+            NibbleArray blockArray = lightengine.get(EnumSkyBlock.BLOCK).getLightSection(SectionPosition.a(chunkPos, i));
+            NibbleArray skyArray = lightengine.get(EnumSkyBlock.SKY).getLightSection(SectionPosition.a(chunkPos, i));
 
             // copy data for safety
             if (blockArray != null) {
@@ -412,7 +414,7 @@ public class ChunkRegionLoader {
 
         ChunkSection[] achunksection = ichunkaccess.getSections();
         NBTTagList nbttaglist = new NBTTagList();
-        LightEngineThreaded lightenginethreaded = worldserver.getChunkProvider().getLightEngine();
+        LightEngineImpl lightengine = worldserver.getChunkProvider().getLightEngine();
         boolean flag = ichunkaccess.r();
 
         NBTTagCompound nbttagcompound2;
@@ -431,8 +433,8 @@ public class ChunkRegionLoader {
             NibbleArray nibblearray; // block light
             NibbleArray nibblearray1; // sky light
             if (asyncsavedata == null) {
-                nibblearray = lightenginethreaded.a(EnumSkyBlock.BLOCK).a(SectionPosition.a(chunkcoordintpair, i)); /// Paper - diff on method change (see getAsyncSaveData)
-                nibblearray1 = lightenginethreaded.a(EnumSkyBlock.SKY).a(SectionPosition.a(chunkcoordintpair, i)); // Paper - diff on method change (see getAsyncSaveData)
+                nibblearray = lightengine.get(EnumSkyBlock.BLOCK).getLightSection(SectionPosition.a(chunkcoordintpair, i)); /// Paper - diff on method change (see getAsyncSaveData)
+                nibblearray1 = lightengine.get(EnumSkyBlock.SKY).getLightSection(SectionPosition.a(chunkcoordintpair, i)); // Paper - diff on method change (see getAsyncSaveData)
             } else {
                 nibblearray = asyncsavedata.blockLight[i + 1]; // +1 to offset the -1 starting index
                 nibblearray1 = asyncsavedata.skyLight[i + 1]; // +1 to offset the -1 starting index
diff --git a/src/main/java/net/minecraft/server/ChunkStatus.java b/src/main/java/net/minecraft/server/ChunkStatus.java
index 51ea295d66312c95685b9fe4ee502a029d2fff20..37ef8d0ab24cd1de2f0175d189a8f220fd164f6f 100644
--- a/src/main/java/net/minecraft/server/ChunkStatus.java
+++ b/src/main/java/net/minecraft/server/ChunkStatus.java
@@ -5,6 +5,8 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Either;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.ints.IntList;
+import net.yatopia.server.lighting.LightEngineImpl;
+
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.List;
@@ -63,7 +65,7 @@ public class ChunkStatus {
     public static final ChunkStatus FEATURES = a("features", ChunkStatus.LIQUID_CARVERS, 8, ChunkStatus.o, ChunkStatus.Type.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, ichunkaccess) -> {
         ProtoChunk protochunk = (ProtoChunk) ichunkaccess;
 
-        protochunk.a((LightEngine) lightenginethreaded);
+        protochunk.a(lightenginethreaded);
         if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
             HeightMap.a(ichunkaccess, EnumSet.of(HeightMap.Type.MOTION_BLOCKING, HeightMap.Type.MOTION_BLOCKING_NO_LEAVES, HeightMap.Type.OCEAN_FLOOR, HeightMap.Type.WORLD_SURFACE));
             RegionLimitedWorldAccess regionlimitedworldaccess = new RegionLimitedWorldAccess(worldserver, list);
@@ -111,14 +113,14 @@ public class ChunkStatus {
     private final ChunkStatus.Type y;
     private final EnumSet<HeightMap.Type> z; public final HeightMap.Type[] heightMaps; // Tuinity
 
-    private static CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(ChunkStatus chunkstatus, LightEngineThreaded lightenginethreaded, IChunkAccess ichunkaccess) {
+    private static CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(ChunkStatus chunkstatus, LightEngineImpl lightenginethreaded, IChunkAccess ichunkaccess) {
         boolean flag = a(chunkstatus, ichunkaccess);
 
         if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
             ((ProtoChunk) ichunkaccess).a(chunkstatus);
         }
 
-        return lightenginethreaded.a(ichunkaccess, flag).thenApply(Either::left);
+        return lightenginethreaded.lightChunk(ichunkaccess, flag).thenApply(Either::left);
     }
 
     private static ChunkStatus a(String s, @Nullable ChunkStatus chunkstatus, int i, EnumSet<HeightMap.Type> enumset, ChunkStatus.Type chunkstatus_type, ChunkStatus.d chunkstatus_d) {
@@ -189,11 +191,11 @@ public class ChunkStatus {
         return this.u;
     }
 
-    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list) {
+    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list) {
         return this.v.doWork(this, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, (IChunkAccess) list.get(list.size() / 2));
     }
 
-    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess) {
+    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess) {
         return this.w.doWork(this, worldserver, definedstructuremanager, lightenginethreaded, function, ichunkaccess);
     }
 
@@ -244,7 +246,7 @@ public class ChunkStatus {
     interface d extends ChunkStatus.b {
 
         @Override
-        default CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess) {
+        default CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess) {
             if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
                 this.doWork(worldserver, chunkgenerator, list, ichunkaccess);
                 if (ichunkaccess instanceof ProtoChunk) {
@@ -260,11 +262,11 @@ public class ChunkStatus {
 
     interface c {
 
-        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess);
+        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess);
     }
 
     interface b {
 
-        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess);
+        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess);
     }
 }
diff --git a/src/main/java/net/minecraft/server/IChunkProvider.java b/src/main/java/net/minecraft/server/IChunkProvider.java
index 1a0b60a1b63ed6f8471c2d9174c9f8bfec047936..79b66830d0bda6c3c0cc344b12647e44e6566ea1 100644
--- a/src/main/java/net/minecraft/server/IChunkProvider.java
+++ b/src/main/java/net/minecraft/server/IChunkProvider.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import net.yatopia.server.lighting.LightEngineImpl;
+
 import java.io.IOException;
 import javax.annotation.Nullable;
 
@@ -34,7 +36,7 @@ public abstract class IChunkProvider implements ILightAccess, AutoCloseable {
 
     public void close() throws IOException {}
 
-    public abstract LightEngine getLightEngine();
+    public abstract LightEngineImpl getLightEngine();
 
     public void a(boolean flag, boolean flag1) {}
 
diff --git a/src/main/java/net/minecraft/server/LightEngineLayerEventListener.java b/src/main/java/net/minecraft/server/LightEngineLayerEventListener.java
index 7f7bfea0b71f556b5272370c9e9e1fe35ff10c69..efc40224c1df629d82775ed5b43437bf406beaf0 100644
--- a/src/main/java/net/minecraft/server/LightEngineLayerEventListener.java
+++ b/src/main/java/net/minecraft/server/LightEngineLayerEventListener.java
@@ -5,9 +5,9 @@ import javax.annotation.Nullable;
 public interface LightEngineLayerEventListener extends ILightEngine {
 
     @Nullable
-    NibbleArray a(SectionPosition sectionposition);
+    NibbleArray a(SectionPosition sectionposition); @Nullable default NibbleArray getLightSection(SectionPosition pos) { return a(pos); } // Yatopia - OBFHELPER
 
-    int b(BlockPosition blockposition);
+    int b(BlockPosition blockposition); @Nullable default int getLightLevel(BlockPosition blockPosition) { return b(blockPosition); } // Yatopia - OBFHELPER
 
     public static enum Void implements LightEngineLayerEventListener {
 
diff --git a/src/main/java/net/minecraft/server/LightEngineThreaded.java b/src/main/java/net/minecraft/server/LightEngineThreaded.java
index 4d024a4849b7566c0faba131caab57b4ddf35e29..0a5ee77f32ca43b3929c8244aba674b0492dd690 100644
--- a/src/main/java/net/minecraft/server/LightEngineThreaded.java
+++ b/src/main/java/net/minecraft/server/LightEngineThreaded.java
@@ -1,10 +1,7 @@
 package net.minecraft.server;
 
-import com.mojang.datafixers.util.Pair;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap; // Paper
-import it.unimi.dsi.fastutil.objects.ObjectArrayList;
-import it.unimi.dsi.fastutil.objects.ObjectList;
-import it.unimi.dsi.fastutil.objects.ObjectListIterator;
+
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.IntSupplier;
@@ -12,7 +9,7 @@ import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class LightEngineThreaded extends LightEngine implements AutoCloseable {
+public class LightEngineThreaded extends LightEngine implements AutoCloseable, net.yatopia.server.lighting.LightEngineImpl {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private final ThreadedMailbox<Runnable> b;
@@ -312,6 +309,19 @@ public class LightEngineThreaded extends LightEngine implements AutoCloseable {
         // Paper end
     }
 
+    // Yatopia start - OBFHELPER and implement methods
+    @Override public int doLightUpdates(int maxUpdateCount, boolean doSkylight, boolean skipEdgeLightPropagation) { return this.a(maxUpdateCount, doSkylight, skipEdgeLightPropagation); }
+    @Override public void addLightSource(BlockPosition pos, int level) { this.a(pos, level); }
+    @Override public void checkBlock(BlockPosition pos) { this.a(pos); }
+    @Override public void updateChunkStatus(ChunkCoordIntPair pos) { this.a(pos); }
+    @Override public void setSectionStatus(SectionPosition pos, boolean notReady) { this.a(pos, notReady); }
+    @Override public void setColumnEnabled(ChunkCoordIntPair pos, boolean lightEnabled) { this.a(pos, lightEnabled); }
+    @Override public void enqueueSectionData(EnumSkyBlock lightType, SectionPosition pos, @Nullable NibbleArray nibbles, boolean flag) { this.a(lightType, pos, nibbles, flag); }
+    @Override public void setRetainData(ChunkCoordIntPair pos, boolean retainData) { this.b(pos, retainData); }
+    @Override public CompletableFuture<IChunkAccess> lightChunk(IChunkAccess chunk, boolean excludeBlocks) { return this.a(chunk, excludeBlocks); }
+    @Override public LightEngineLayerEventListener get(EnumSkyBlock lightType) { return super.a(lightType); }
+    // Yatopia end
+
     public void queueUpdate() {
         if ((!this.queue.isEmpty() || super.a()) && this.g.compareAndSet(false, true)) { // Paper
             this.b.a((() -> { // Paper - decompile error
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 07fc09543c154fdf8b8beb86c3466c9ccd24372b..8006c3abcb4112353a70c9df339dcfafa2160b07 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -625,7 +625,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         worldloadlistener.a(new ChunkCoordIntPair(blockposition));
         ChunkProviderServer chunkproviderserver = worldserver.getChunkProvider();
 
-        chunkproviderserver.getLightEngine().a(500);
+        // TODO chunkproviderserver.getLightEngine().a(500);
         this.nextTick = SystemUtils.getMonotonicMillis();
         // Paper start - Configurable spawn radius
         if (worldserver.keepSpawnInMemory) {
@@ -661,7 +661,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.executeModerately();
         // CraftBukkit end
         worldloadlistener.b();
-        chunkproviderserver.getLightEngine().a(worldserver.paperConfig.lightQueueSize); // Paper - increase light queue size
+        // chunkproviderserver.getLightEngine().a(worldserver.paperConfig.lightQueueSize); // TODO Paper - increase light queue size
         this.bb();
 
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutLightUpdate.java b/src/main/java/net/minecraft/server/PacketPlayOutLightUpdate.java
index a22f0cccecc85b4e4fe4603bcfa213f15c23db69..9712f2b42403c7dc399f3387cd0ff1511bf57ec8 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutLightUpdate.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutLightUpdate.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import io.netty.channel.ChannelFuture; // Paper
+import net.yatopia.server.lighting.LightEngineImpl;
 
 import java.io.IOException;
 import java.util.Iterator;
@@ -50,7 +51,7 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
     // Paper end
     public PacketPlayOutLightUpdate() {}
 
-    public PacketPlayOutLightUpdate(ChunkCoordIntPair chunkcoordintpair, LightEngine lightengine, boolean flag) {
+    public PacketPlayOutLightUpdate(ChunkCoordIntPair chunkcoordintpair, LightEngineImpl lightengine, boolean flag) {
         this.a = chunkcoordintpair.x;
         this.b = chunkcoordintpair.z;
         this.i = flag;
@@ -58,8 +59,8 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
         this.h = Lists.newArrayList();cleaner2 = MCUtil.registerListCleaner(this, this.h, NibbleArray::releaseBytes); // Paper
 
         for (int i = 0; i < 18; ++i) {
-            NibbleArray nibblearray = lightengine.a(EnumSkyBlock.SKY).a(SectionPosition.a(chunkcoordintpair, -1 + i));
-            NibbleArray nibblearray1 = lightengine.a(EnumSkyBlock.BLOCK).a(SectionPosition.a(chunkcoordintpair, -1 + i));
+            NibbleArray nibblearray = lightengine.get(EnumSkyBlock.SKY).getLightSection(SectionPosition.a(chunkcoordintpair, -1 + i));
+            NibbleArray nibblearray1 = lightengine.get(EnumSkyBlock.BLOCK).getLightSection(SectionPosition.a(chunkcoordintpair, -1 + i));
 
             if (nibblearray != null) {
                 if (nibblearray.c()) {
@@ -82,7 +83,7 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
 
     }
 
-    public PacketPlayOutLightUpdate(ChunkCoordIntPair chunkcoordintpair, LightEngine lightengine, int i, int j, boolean flag) {
+    public PacketPlayOutLightUpdate(ChunkCoordIntPair chunkcoordintpair, LightEngineImpl lightengine, int i, int j, boolean flag) {
         this.a = chunkcoordintpair.x;
         this.b = chunkcoordintpair.z;
         this.i = flag;
@@ -95,7 +96,7 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
             NibbleArray nibblearray;
 
             if ((this.c & 1 << k) != 0) {
-                nibblearray = lightengine.a(EnumSkyBlock.SKY).a(SectionPosition.a(chunkcoordintpair, -1 + k));
+                nibblearray = lightengine.get(EnumSkyBlock.SKY).getLightSection(SectionPosition.a(chunkcoordintpair, -1 + k));
                 if (nibblearray != null && !nibblearray.c()) {
                     this.g.add(nibblearray.getCloneIfSet()); // Paper
                 } else {
@@ -107,7 +108,7 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
             }
 
             if ((this.d & 1 << k) != 0) {
-                nibblearray = lightengine.a(EnumSkyBlock.BLOCK).a(SectionPosition.a(chunkcoordintpair, -1 + k));
+                nibblearray = lightengine.get(EnumSkyBlock.BLOCK).getLightSection(SectionPosition.a(chunkcoordintpair, -1 + k));
                 if (nibblearray != null && !nibblearray.c()) {
                     this.h.add(nibblearray.getCloneIfSet()); // Paper
                 } else {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index e6576054f1db3438d79e04fe252d20864ec84a08..675b352927c2f407e5c53f6b27d8f129d5922ae3 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -4,6 +4,8 @@ import com.mojang.datafixers.util.Either;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap; // Paper
 import it.unimi.dsi.fastutil.shorts.ShortArraySet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
+import net.yatopia.server.lighting.LightEngineImpl;
+
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
@@ -35,7 +37,7 @@ public class PlayerChunk {
     private final ShortSet[] dirtyBlocks;
     private int r;
     private int s;
-    private final LightEngine lightEngine;
+    private final LightEngineImpl lightEngine;
     private final PlayerChunk.c u;
     public final PlayerChunk.d players;
     private boolean hasBeenLoaded;
@@ -192,7 +194,7 @@ public class PlayerChunk {
     }
     // Paper end
 
-    public PlayerChunk(ChunkCoordIntPair chunkcoordintpair, int i, LightEngine lightengine, PlayerChunk.c playerchunk_c, PlayerChunk.d playerchunk_d) {
+    public PlayerChunk(ChunkCoordIntPair chunkcoordintpair, int i, LightEngineImpl lightengine, PlayerChunk.c playerchunk_c, PlayerChunk.d playerchunk_d) {
         this.statusFutures = new AtomicReferenceArray(PlayerChunk.CHUNK_STATUSES.size());
         this.fullChunkFuture = PlayerChunk.UNLOADED_CHUNK_FUTURE;
         this.tickingFuture = PlayerChunk.UNLOADED_CHUNK_FUTURE;
@@ -749,7 +751,7 @@ public class PlayerChunk {
                 ioPriority = com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGH_PRIORITY;
             }
             chunkMap.world.asyncChunkTaskManager.raisePriority(location.x, location.z, ioPriority);
-            chunkMap.world.getChunkProvider().getLightEngine().queue.changePriority(location.pair(), getCurrentPriority(), priority);
+            // TODO chunkMap.world.getChunkProvider().getLightEngine().queue.changePriority(location.pair(), getCurrentPriority(), priority);
         }
         if (getCurrentPriority() != priority) {
             this.u.a(this.location, this::getCurrentPriority, priority, this::setPriority); // use preferred priority
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 807a54e24018455a997e4410cdb7579dac13bd8d..0fca1bc92c844a7c753d39d1097178af77dae743 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -41,6 +41,7 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import it.unimi.dsi.fastutil.objects.ObjectRBTreeSet; // Paper
+import net.yatopia.server.lighting.LightEngineImpl;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -81,7 +82,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     private final Long2ObjectLinkedOpenHashMap<PlayerChunk> pendingUnload;
     final LongSet loadedChunks; // Paper - private -> package
     public final WorldServer world;
-    private final LightEngineThreaded lightEngine;
+    private final LightEngineImpl lightEngine;
     private final IAsyncTaskHandler<Runnable> executor;
     final java.util.concurrent.Executor mainInvokingExecutor; // Paper
     public final ChunkGenerator chunkGenerator;
@@ -618,7 +619,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         return Math.max(Math.abs(k), Math.abs(l));
     }
 
-    protected LightEngineThreaded a() {
+    protected LightEngineImpl a() {
         return this.lightEngine;
     }
 
@@ -1083,8 +1084,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                         this.saveChunk(ichunkaccess);
                     }
 
-                    this.lightEngine.a(ichunkaccess.getPos());
-                    this.lightEngine.queueUpdate();
+                    this.lightEngine.updateChunkStatus(ichunkaccess.getPos());
+                    // this.lightEngine.queueUpdate();
                     this.worldLoadListener.a(ichunkaccess.getPos(), (ChunkStatus) null);
                 }
                 //if (removed) this.dataRegionManager.removeChunk(playerchunk.location.x, playerchunk.location.z); // Tuinity
diff --git a/src/main/java/net/minecraft/server/ProtoChunk.java b/src/main/java/net/minecraft/server/ProtoChunk.java
index a3ac883500eaebb353ad3108a17b5c740e384b03..9f1246dc90d1f40cc8b58ab07769335cb0e0cd3c 100644
--- a/src/main/java/net/minecraft/server/ProtoChunk.java
+++ b/src/main/java/net/minecraft/server/ProtoChunk.java
@@ -18,6 +18,8 @@ import java.util.Map.Entry;
 import java.util.Set;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+
+import net.yatopia.server.lighting.LightEngineImpl;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -29,7 +31,7 @@ public class ProtoChunk implements IChunkAccess {
     @Nullable
     private BiomeStorage d;
     @Nullable
-    private volatile LightEngine e;
+    private volatile LightEngineImpl e;
     private final Map<HeightMap.Type, HeightMap> f;
     private volatile ChunkStatus g;
     private final Map<BlockPosition, TileEntity> h;
@@ -174,9 +176,9 @@ public class ProtoChunk implements IChunkAccess {
                 IBlockData iblockdata1 = chunksection.setType(i & 15, j & 15, k & 15, iblockdata);
 
                 if (this.g.b(ChunkStatus.FEATURES) && iblockdata != iblockdata1 && (iblockdata.b((IBlockAccess) this, blockposition) != iblockdata1.b((IBlockAccess) this, blockposition) || iblockdata.f() != iblockdata1.f() || iblockdata.e() || iblockdata1.e())) {
-                    LightEngine lightengine = this.e();
+                    LightEngineImpl lightengine = this.e();
 
-                    lightengine.a(blockposition);
+                    lightengine.checkBlock(blockposition);
                 }
 
                 HeightMap.Type[] enumset = this.getChunkStatus().heightMaps; // Tuinity - reduce iterator creation
@@ -298,7 +300,7 @@ public class ProtoChunk implements IChunkAccess {
     }
 
     @Nullable
-    public LightEngine e() {
+    public LightEngineImpl e() {
         return this.e;
     }
 
@@ -495,7 +497,7 @@ public class ProtoChunk implements IChunkAccess {
         this.t.put(worldgenstage_features, bitset);
     }
 
-    public void a(LightEngine lightengine) {
+    public void a(LightEngineImpl lightengine) {
         this.e = lightengine;
     }
 
diff --git a/src/main/java/net/minecraft/server/ProtoChunkExtension.java b/src/main/java/net/minecraft/server/ProtoChunkExtension.java
index 9ee7e1e93659beb747b8fe2b926522b14734d0cd..b1837ffe4ca167e1cb2fa7885396dabae2758ad6 100644
--- a/src/main/java/net/minecraft/server/ProtoChunkExtension.java
+++ b/src/main/java/net/minecraft/server/ProtoChunkExtension.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 import it.unimi.dsi.fastutil.longs.LongSet;
+import net.yatopia.server.lighting.LightEngineImpl;
+
 import java.util.BitSet;
 import java.util.Map;
 import java.util.stream.Stream;
@@ -64,7 +66,7 @@ public class ProtoChunkExtension extends ProtoChunk {
 
     @Nullable
     @Override
-    public LightEngine e() {
+    public LightEngineImpl e() {
         return this.a.e();
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 1b08df02c18230bffb37a945944073fff22b16c9..14e2f0c388209a85dff5237cf3e873a4124e6f0e 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -424,7 +424,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
                 if ((i & 128) == 0 && iblockdata2 != iblockdata1 && (iblockdata2.b((IBlockAccess) this, blockposition) != iblockdata1.b((IBlockAccess) this, blockposition) || iblockdata2.f() != iblockdata1.f() || iblockdata2.e() || iblockdata1.e())) {
                     //this.getMethodProfiler().enter("queueCheckLight"); // Akarin - remove caller
-                    this.getChunkProvider().getLightEngine().a(blockposition);
+                    this.getChunkProvider().getLightEngine().checkBlock(blockposition);
                     //this.getMethodProfiler().exit(); // Akarin - remove caller
                 }
 
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 14b8bf88f6755818e0cdeb0a2ab0a8996ea1f886..bf8030d281571c6c2b74cca799ce28fa2b254c0a 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1147,7 +1147,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             }
             //gameprofilerfiller.exit(); // Akarin - remove caller
             timings.chunkTicksBlocks.stopTiming(); // Paper
-            getChunkProvider().getLightEngine().queueUpdate(); // Paper
+            // getChunkProvider().getLightEngine().queueUpdate(); // Paper
             // Paper end
         }
     }
@@ -1780,7 +1780,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         }
         // Paper end
 
-        chunkProvider.getLightEngine().queue.remove(chunk.getPos().pair()); // Yatopia - unregister from light queue
+        // chunkProvider.getLightEngine().queue.remove(chunk.getPos().pair()); // TODO Yatopia - unregister from light queue
     }
 
     public void unregisterEntity(Entity entity) {
diff --git a/src/main/java/net/yatopia/server/lighting/LightEngineImpl.java b/src/main/java/net/yatopia/server/lighting/LightEngineImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..7a8487aedaf7a8ba1bf6de60c5967536d812c11f
--- /dev/null
+++ b/src/main/java/net/yatopia/server/lighting/LightEngineImpl.java
@@ -0,0 +1,37 @@
+package net.yatopia.server.lighting;
+
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.ChunkCoordIntPair;
+import net.minecraft.server.EnumSkyBlock;
+import net.minecraft.server.IChunkAccess;
+import net.minecraft.server.LightEngineLayerEventListener;
+import net.minecraft.server.NibbleArray;
+import net.minecraft.server.SectionPosition;
+
+import javax.annotation.Nullable;
+import java.io.Closeable;
+import java.util.concurrent.CompletableFuture;
+
+public interface LightEngineImpl extends Closeable {
+
+    int doLightUpdates(int maxUpdateCount, boolean doSkylight, boolean skipEdgeLightPropagation);
+
+    void addLightSource(BlockPosition pos, int level);
+
+    void checkBlock(BlockPosition pos);
+
+    void updateChunkStatus(ChunkCoordIntPair pos);
+
+    void setSectionStatus(SectionPosition pos, boolean notReady);
+
+    void setColumnEnabled(ChunkCoordIntPair pos, boolean lightEnabled);
+
+    void enqueueSectionData(EnumSkyBlock lightType, SectionPosition pos, @Nullable NibbleArray nibbles, boolean flag);
+
+    void setRetainData(ChunkCoordIntPair pos, boolean retainData);
+
+    CompletableFuture<IChunkAccess> lightChunk(IChunkAccess chunk, boolean excludeBlocks);
+
+    LightEngineLayerEventListener get(EnumSkyBlock lightType);
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index d2c45157a27c24651c72fd8ab9a0950dec097b84..7c42dabaa3b5b4adfa1101f95ae6869fb8bc7808 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -24,6 +24,7 @@ import net.minecraft.server.SectionPosition;
 import net.minecraft.server.SeededRandom;
 import net.minecraft.server.WorldChunkManager;
 import net.minecraft.server.WorldServer;
+import net.yatopia.server.lighting.LightEngineImpl;
 import org.bukkit.Chunk;
 import org.bukkit.ChunkSnapshot;
 import org.bukkit.World;
@@ -268,15 +269,15 @@ public class CraftChunk implements Chunk {
 
                 sectionBlockIDs[i] = blockids;
 
-                LightEngine lightengine = chunk.world.getChunkProvider().getLightEngine();
-                NibbleArray skyLightArray = lightengine.a(EnumSkyBlock.SKY).a(SectionPosition.a(x, i, z));
+                LightEngineImpl lightengine = chunk.world.getChunkProvider().getLightEngine();
+                NibbleArray skyLightArray = lightengine.get(EnumSkyBlock.SKY).getLightSection(SectionPosition.a(x, i, z));
                 if (skyLightArray == null) {
                     sectionSkyLights[i] = emptyLight;
                 } else {
                     sectionSkyLights[i] = new byte[2048];
                     System.arraycopy(skyLightArray.getIfSet(), 0, sectionSkyLights[i], 0, 2048); // Paper
                 }
-                NibbleArray emitLightArray = lightengine.a(EnumSkyBlock.BLOCK).a(SectionPosition.a(x, i, z));
+                NibbleArray emitLightArray = lightengine.get(EnumSkyBlock.BLOCK).getLightSection(SectionPosition.a(x, i, z));
                 if (emitLightArray == null) {
                     sectionEmitLights[i] = emptyLight;
                 } else {
