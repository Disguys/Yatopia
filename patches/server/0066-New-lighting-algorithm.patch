From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Wed, 7 Oct 2020 17:47:12 +0800
Subject: [PATCH] New lighting algorithm


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 084a31f16c925ccdc58d6e4faeeb497f4de7b2ee..cb7596227fb223c1fd268a8fbdb41455f508210c 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -19,6 +19,7 @@ import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap; // Paper
+import net.yatopia.server.lighting.LightEngineImpl;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -35,7 +36,7 @@ public class ChunkProviderServer extends IChunkProvider {
     public final ChunkGenerator chunkGenerator;
     private final WorldServer world;
     public final Thread serverThread; // Paper - private -> public
-    private final LightEngineThreaded lightEngine;
+    private final LightEngineImpl lightEngine;
     public final ChunkProviderServer.a serverThreadQueue; // Paper private -> public
     public final PlayerChunkMap playerChunkMap;
     private final WorldPersistentData worldPersistentData;
diff --git a/src/main/java/net/minecraft/server/ChunkStatus.java b/src/main/java/net/minecraft/server/ChunkStatus.java
index 51ea295d66312c95685b9fe4ee502a029d2fff20..6c070ec073d4366097a6e70871f3b9decc3295b1 100644
--- a/src/main/java/net/minecraft/server/ChunkStatus.java
+++ b/src/main/java/net/minecraft/server/ChunkStatus.java
@@ -5,6 +5,8 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.util.Either;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.ints.IntList;
+import net.yatopia.server.lighting.LightEngineImpl;
+
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.List;
@@ -111,14 +113,14 @@ public class ChunkStatus {
     private final ChunkStatus.Type y;
     private final EnumSet<HeightMap.Type> z; public final HeightMap.Type[] heightMaps; // Tuinity
 
-    private static CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(ChunkStatus chunkstatus, LightEngineThreaded lightenginethreaded, IChunkAccess ichunkaccess) {
+    private static CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(ChunkStatus chunkstatus, LightEngineImpl lightenginethreaded, IChunkAccess ichunkaccess) {
         boolean flag = a(chunkstatus, ichunkaccess);
 
         if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
             ((ProtoChunk) ichunkaccess).a(chunkstatus);
         }
 
-        return lightenginethreaded.a(ichunkaccess, flag).thenApply(Either::left);
+        return lightenginethreaded.lightChunk(ichunkaccess, flag).thenApply(Either::left);
     }
 
     private static ChunkStatus a(String s, @Nullable ChunkStatus chunkstatus, int i, EnumSet<HeightMap.Type> enumset, ChunkStatus.Type chunkstatus_type, ChunkStatus.d chunkstatus_d) {
@@ -189,11 +191,11 @@ public class ChunkStatus {
         return this.u;
     }
 
-    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list) {
+    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list) {
         return this.v.doWork(this, worldserver, chunkgenerator, definedstructuremanager, lightenginethreaded, function, list, (IChunkAccess) list.get(list.size() / 2));
     }
 
-    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess) {
+    public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess) {
         return this.w.doWork(this, worldserver, definedstructuremanager, lightenginethreaded, function, ichunkaccess);
     }
 
@@ -244,7 +246,7 @@ public class ChunkStatus {
     interface d extends ChunkStatus.b {
 
         @Override
-        default CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess) {
+        default CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess) {
             if (!ichunkaccess.getChunkStatus().b(chunkstatus)) {
                 this.doWork(worldserver, chunkgenerator, list, ichunkaccess);
                 if (ichunkaccess instanceof ProtoChunk) {
@@ -260,11 +262,11 @@ public class ChunkStatus {
 
     interface c {
 
-        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess);
+        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, IChunkAccess ichunkaccess);
     }
 
     interface b {
 
-        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineThreaded lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess);
+        CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> doWork(ChunkStatus chunkstatus, WorldServer worldserver, ChunkGenerator chunkgenerator, DefinedStructureManager definedstructuremanager, LightEngineImpl lightenginethreaded, Function<IChunkAccess, CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>>> function, List<IChunkAccess> list, IChunkAccess ichunkaccess);
     }
 }
diff --git a/src/main/java/net/minecraft/server/LightEngineLayerEventListener.java b/src/main/java/net/minecraft/server/LightEngineLayerEventListener.java
index 7f7bfea0b71f556b5272370c9e9e1fe35ff10c69..efc40224c1df629d82775ed5b43437bf406beaf0 100644
--- a/src/main/java/net/minecraft/server/LightEngineLayerEventListener.java
+++ b/src/main/java/net/minecraft/server/LightEngineLayerEventListener.java
@@ -5,9 +5,9 @@ import javax.annotation.Nullable;
 public interface LightEngineLayerEventListener extends ILightEngine {
 
     @Nullable
-    NibbleArray a(SectionPosition sectionposition);
+    NibbleArray a(SectionPosition sectionposition); @Nullable default NibbleArray getLightSection(SectionPosition pos) { return a(pos); } // Yatopia - OBFHELPER
 
-    int b(BlockPosition blockposition);
+    int b(BlockPosition blockposition); @Nullable default int getLightLevel(BlockPosition blockPosition) { return b(blockPosition); } // Yatopia - OBFHELPER
 
     public static enum Void implements LightEngineLayerEventListener {
 
diff --git a/src/main/java/net/minecraft/server/LightEngineThreaded.java b/src/main/java/net/minecraft/server/LightEngineThreaded.java
index 4d024a4849b7566c0faba131caab57b4ddf35e29..76f0194ace33a4f0dcbcf6112fdefe8c8c913a8b 100644
--- a/src/main/java/net/minecraft/server/LightEngineThreaded.java
+++ b/src/main/java/net/minecraft/server/LightEngineThreaded.java
@@ -12,7 +12,7 @@ import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class LightEngineThreaded extends LightEngine implements AutoCloseable {
+public class LightEngineThreaded extends LightEngine implements AutoCloseable, net.yatopia.server.lighting.LightEngineImpl {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private final ThreadedMailbox<Runnable> b;
@@ -312,6 +312,19 @@ public class LightEngineThreaded extends LightEngine implements AutoCloseable {
         // Paper end
     }
 
+    // Yatopia start - OBFHELPER and implement methods
+    @Override public int doLightUpdates(int maxUpdateCount, boolean doSkylight, boolean skipEdgeLightPropagation) { return this.a(maxUpdateCount, doSkylight, skipEdgeLightPropagation); }
+    @Override public void addLightSource(BlockPosition pos, int level) { this.a(pos, level); }
+    @Override public void checkBlock(BlockPosition pos) { this.a(pos); }
+    @Override public void updateChunkStatus(ChunkCoordIntPair pos) { this.a(pos); }
+    @Override public void setSectionStatus(SectionPosition pos, boolean notReady) { this.a(pos, notReady); }
+    @Override public void setColumnEnabled(SectionPosition pos, boolean lightEnabled) { this.a(pos, lightEnabled); }
+    @Override public void enqueueSectionData(EnumSkyBlock lightType, SectionPosition pos, @Nullable NibbleArray nibbles, boolean flag) { this.a(lightType, pos, nibbles, flag); }
+    @Override public void setRetainData(ChunkCoordIntPair pos, boolean retainData) { this.b(pos, retainData); }
+    @Override public CompletableFuture<IChunkAccess> lightChunk(IChunkAccess chunk, boolean excludeBlocks) { return this.a(chunk, excludeBlocks); }
+    @Override public LightEngineLayerEventListener get(EnumSkyBlock lightType) { return super.a(lightType); }
+    // Yatopia end
+
     public void queueUpdate() {
         if ((!this.queue.isEmpty() || super.a()) && this.g.compareAndSet(false, true)) { // Paper
             this.b.a((() -> { // Paper - decompile error
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutLightUpdate.java b/src/main/java/net/minecraft/server/PacketPlayOutLightUpdate.java
index a22f0cccecc85b4e4fe4603bcfa213f15c23db69..9712f2b42403c7dc399f3387cd0ff1511bf57ec8 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutLightUpdate.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutLightUpdate.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import com.google.common.collect.Lists;
 import io.netty.channel.ChannelFuture; // Paper
+import net.yatopia.server.lighting.LightEngineImpl;
 
 import java.io.IOException;
 import java.util.Iterator;
@@ -50,7 +51,7 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
     // Paper end
     public PacketPlayOutLightUpdate() {}
 
-    public PacketPlayOutLightUpdate(ChunkCoordIntPair chunkcoordintpair, LightEngine lightengine, boolean flag) {
+    public PacketPlayOutLightUpdate(ChunkCoordIntPair chunkcoordintpair, LightEngineImpl lightengine, boolean flag) {
         this.a = chunkcoordintpair.x;
         this.b = chunkcoordintpair.z;
         this.i = flag;
@@ -58,8 +59,8 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
         this.h = Lists.newArrayList();cleaner2 = MCUtil.registerListCleaner(this, this.h, NibbleArray::releaseBytes); // Paper
 
         for (int i = 0; i < 18; ++i) {
-            NibbleArray nibblearray = lightengine.a(EnumSkyBlock.SKY).a(SectionPosition.a(chunkcoordintpair, -1 + i));
-            NibbleArray nibblearray1 = lightengine.a(EnumSkyBlock.BLOCK).a(SectionPosition.a(chunkcoordintpair, -1 + i));
+            NibbleArray nibblearray = lightengine.get(EnumSkyBlock.SKY).getLightSection(SectionPosition.a(chunkcoordintpair, -1 + i));
+            NibbleArray nibblearray1 = lightengine.get(EnumSkyBlock.BLOCK).getLightSection(SectionPosition.a(chunkcoordintpair, -1 + i));
 
             if (nibblearray != null) {
                 if (nibblearray.c()) {
@@ -82,7 +83,7 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
 
     }
 
-    public PacketPlayOutLightUpdate(ChunkCoordIntPair chunkcoordintpair, LightEngine lightengine, int i, int j, boolean flag) {
+    public PacketPlayOutLightUpdate(ChunkCoordIntPair chunkcoordintpair, LightEngineImpl lightengine, int i, int j, boolean flag) {
         this.a = chunkcoordintpair.x;
         this.b = chunkcoordintpair.z;
         this.i = flag;
@@ -95,7 +96,7 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
             NibbleArray nibblearray;
 
             if ((this.c & 1 << k) != 0) {
-                nibblearray = lightengine.a(EnumSkyBlock.SKY).a(SectionPosition.a(chunkcoordintpair, -1 + k));
+                nibblearray = lightengine.get(EnumSkyBlock.SKY).getLightSection(SectionPosition.a(chunkcoordintpair, -1 + k));
                 if (nibblearray != null && !nibblearray.c()) {
                     this.g.add(nibblearray.getCloneIfSet()); // Paper
                 } else {
@@ -107,7 +108,7 @@ public class PacketPlayOutLightUpdate implements Packet<PacketListenerPlayOut> {
             }
 
             if ((this.d & 1 << k) != 0) {
-                nibblearray = lightengine.a(EnumSkyBlock.BLOCK).a(SectionPosition.a(chunkcoordintpair, -1 + k));
+                nibblearray = lightengine.get(EnumSkyBlock.BLOCK).getLightSection(SectionPosition.a(chunkcoordintpair, -1 + k));
                 if (nibblearray != null && !nibblearray.c()) {
                     this.h.add(nibblearray.getCloneIfSet()); // Paper
                 } else {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index e6576054f1db3438d79e04fe252d20864ec84a08..3df3116c0071e25fa4e0b41b7f597fd4df69d2fb 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -4,6 +4,8 @@ import com.mojang.datafixers.util.Either;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap; // Paper
 import it.unimi.dsi.fastutil.shorts.ShortArraySet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
+import net.yatopia.server.lighting.LightEngineImpl;
+
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
@@ -35,7 +37,7 @@ public class PlayerChunk {
     private final ShortSet[] dirtyBlocks;
     private int r;
     private int s;
-    private final LightEngine lightEngine;
+    private final LightEngineImpl lightEngine;
     private final PlayerChunk.c u;
     public final PlayerChunk.d players;
     private boolean hasBeenLoaded;
@@ -192,7 +194,7 @@ public class PlayerChunk {
     }
     // Paper end
 
-    public PlayerChunk(ChunkCoordIntPair chunkcoordintpair, int i, LightEngine lightengine, PlayerChunk.c playerchunk_c, PlayerChunk.d playerchunk_d) {
+    public PlayerChunk(ChunkCoordIntPair chunkcoordintpair, int i, LightEngineImpl lightengine, PlayerChunk.c playerchunk_c, PlayerChunk.d playerchunk_d) {
         this.statusFutures = new AtomicReferenceArray(PlayerChunk.CHUNK_STATUSES.size());
         this.fullChunkFuture = PlayerChunk.UNLOADED_CHUNK_FUTURE;
         this.tickingFuture = PlayerChunk.UNLOADED_CHUNK_FUTURE;
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 807a54e24018455a997e4410cdb7579dac13bd8d..0fca1bc92c844a7c753d39d1097178af77dae743 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -41,6 +41,7 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import it.unimi.dsi.fastutil.objects.ObjectRBTreeSet; // Paper
+import net.yatopia.server.lighting.LightEngineImpl;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -81,7 +82,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     private final Long2ObjectLinkedOpenHashMap<PlayerChunk> pendingUnload;
     final LongSet loadedChunks; // Paper - private -> package
     public final WorldServer world;
-    private final LightEngineThreaded lightEngine;
+    private final LightEngineImpl lightEngine;
     private final IAsyncTaskHandler<Runnable> executor;
     final java.util.concurrent.Executor mainInvokingExecutor; // Paper
     public final ChunkGenerator chunkGenerator;
@@ -618,7 +619,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         return Math.max(Math.abs(k), Math.abs(l));
     }
 
-    protected LightEngineThreaded a() {
+    protected LightEngineImpl a() {
         return this.lightEngine;
     }
 
@@ -1083,8 +1084,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                         this.saveChunk(ichunkaccess);
                     }
 
-                    this.lightEngine.a(ichunkaccess.getPos());
-                    this.lightEngine.queueUpdate();
+                    this.lightEngine.updateChunkStatus(ichunkaccess.getPos());
+                    // this.lightEngine.queueUpdate();
                     this.worldLoadListener.a(ichunkaccess.getPos(), (ChunkStatus) null);
                 }
                 //if (removed) this.dataRegionManager.removeChunk(playerchunk.location.x, playerchunk.location.z); // Tuinity
diff --git a/src/main/java/net/yatopia/server/lighting/LightEngineImpl.java b/src/main/java/net/yatopia/server/lighting/LightEngineImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..9d7402101155889b20d68e869d7baca08748698d
--- /dev/null
+++ b/src/main/java/net/yatopia/server/lighting/LightEngineImpl.java
@@ -0,0 +1,37 @@
+package net.yatopia.server.lighting;
+
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.ChunkCoordIntPair;
+import net.minecraft.server.EnumSkyBlock;
+import net.minecraft.server.IChunkAccess;
+import net.minecraft.server.LightEngineLayerEventListener;
+import net.minecraft.server.NibbleArray;
+import net.minecraft.server.SectionPosition;
+
+import javax.annotation.Nullable;
+import java.io.Closeable;
+import java.util.concurrent.CompletableFuture;
+
+public interface LightEngineImpl extends Closeable {
+
+    int doLightUpdates(int maxUpdateCount, boolean doSkylight, boolean skipEdgeLightPropagation);
+
+    void addLightSource(BlockPosition pos, int level);
+
+    void checkBlock(BlockPosition pos);
+
+    void updateChunkStatus(ChunkCoordIntPair pos);
+
+    void setSectionStatus(SectionPosition pos, boolean notReady);
+
+    void setColumnEnabled(SectionPosition pos, boolean lightEnabled);
+
+    void enqueueSectionData(EnumSkyBlock lightType, SectionPosition pos, @Nullable NibbleArray nibbles, boolean flag);
+
+    void setRetainData(ChunkCoordIntPair pos, boolean retainData);
+
+    CompletableFuture<IChunkAccess> lightChunk(IChunkAccess chunk, boolean excludeBlocks);
+
+    LightEngineLayerEventListener get(EnumSkyBlock lightType);
+
+}
